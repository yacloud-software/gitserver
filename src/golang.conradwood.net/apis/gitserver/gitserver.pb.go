// Code generated by protoc-gen-go.
// source: protos/golang.conradwood.net/apis/gitserver/gitserver.proto
// DO NOT EDIT!

/*
Package gitserver is a generated protocol buffer package.

It is generated from these files:
	protos/golang.conradwood.net/apis/gitserver/gitserver.proto

It has these top-level messages:
	GitCredentials
	RepoTagRequest
	CreateRepoLog
	Build
	BuildList
	RepositoryList
	Permission
	Watchers
	Repository
	GroupRepositoryAccess
	UserRepositoryAccess
	PostReceiveRequest
	PostReceiveStream
	ByIDRequest
	ByURLRequest
	RepositoryInfo
	GitInfo
	CreateRepoRequest
	SourceRepository
	SourceRepositoryURL
	SourceRepositoryList
	SetRepoFlagsRequest
	ForkRequest
	PingState
	CheckGitRequest
	CheckGitResponse
	RepoFilter
	UpdateRepoStatusRequest
	HookRequest
	HookResponse
	RepoUpdateRequest
	SourceRepositoryResponse
	GitCredentialsRequest
	GitCredentialsResponse
*/
package gitserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import auth "golang.conradwood.net/apis/auth"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// SC_FIRMWARE_XXX means the main singingcat 'kernel' running on cpu XXX
// note that a repo can have multiple tags, for example an SC_APP_XXX can be compiled from the same source in a repo
type REPOTAG int32

const (
	REPOTAG_UNDEFINED              REPOTAG = 0
	REPOTAG_SC_FIRMWARE_STM32L15X  REPOTAG = 1
	REPOTAG_SC_LOADER_STM32L15X    REPOTAG = 2
	REPOTAG_SC_APP_STM32_L15X      REPOTAG = 3
	REPOTAG_ESP8266_AS_COPROCESSOR REPOTAG = 4
	REPOTAG_ESP32_AS_COPROCESSOR   REPOTAG = 5
	REPOTAG_SC_FIRMWARE_ESP32      REPOTAG = 6
	REPOTAG_SC_APP_ESP32           REPOTAG = 7
)

var REPOTAG_name = map[int32]string{
	0: "UNDEFINED",
	1: "SC_FIRMWARE_STM32L15X",
	2: "SC_LOADER_STM32L15X",
	3: "SC_APP_STM32_L15X",
	4: "ESP8266_AS_COPROCESSOR",
	5: "ESP32_AS_COPROCESSOR",
	6: "SC_FIRMWARE_ESP32",
	7: "SC_APP_ESP32",
}
var REPOTAG_value = map[string]int32{
	"UNDEFINED":              0,
	"SC_FIRMWARE_STM32L15X":  1,
	"SC_LOADER_STM32L15X":    2,
	"SC_APP_STM32_L15X":      3,
	"ESP8266_AS_COPROCESSOR": 4,
	"ESP32_AS_COPROCESSOR":   5,
	"SC_FIRMWARE_ESP32":      6,
	"SC_APP_ESP32":           7,
}

func (x REPOTAG) String() string {
	return proto.EnumName(REPOTAG_name, int32(x))
}
func (REPOTAG) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NewRepoState int32

const (
	NewRepoState_NOCHANGE  NewRepoState = 0
	NewRepoState_SET_TRUE  NewRepoState = 1
	NewRepoState_SET_FALSE NewRepoState = 2
)

var NewRepoState_name = map[int32]string{
	0: "NOCHANGE",
	1: "SET_TRUE",
	2: "SET_FALSE",
}
var NewRepoState_value = map[string]int32{
	"NOCHANGE":  0,
	"SET_TRUE":  1,
	"SET_FALSE": 2,
}

func (x NewRepoState) String() string {
	return proto.EnumName(NewRepoState_name, int32(x))
}
func (NewRepoState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GitCredentials struct {
	ID       uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	UserID   string `protobuf:"bytes,2,opt,name=UserID" json:"UserID,omitempty"`
	Host     string `protobuf:"bytes,3,opt,name=Host" json:"Host,omitempty"`
	Path     string `protobuf:"bytes,4,opt,name=Path" json:"Path,omitempty"`
	Username string `protobuf:"bytes,5,opt,name=Username" json:"Username,omitempty"`
	Password string `protobuf:"bytes,6,opt,name=Password" json:"Password,omitempty"`
}

func (m *GitCredentials) Reset()                    { *m = GitCredentials{} }
func (m *GitCredentials) String() string            { return proto.CompactTextString(m) }
func (*GitCredentials) ProtoMessage()               {}
func (*GitCredentials) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GitCredentials) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *GitCredentials) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GitCredentials) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *GitCredentials) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GitCredentials) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GitCredentials) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type RepoTagRequest struct {
	Tag uint32 `protobuf:"varint,1,opt,name=Tag" json:"Tag,omitempty"`
}

func (m *RepoTagRequest) Reset()                    { *m = RepoTagRequest{} }
func (m *RepoTagRequest) String() string            { return proto.CompactTextString(m) }
func (*RepoTagRequest) ProtoMessage()               {}
func (*RepoTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RepoTagRequest) GetTag() uint32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

// a log and statemachine in the database for creating repos
type CreateRepoLog struct {
	// database id
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	// which repo does it refer to?
	RepositoryID uint64 `protobuf:"varint,2,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
	// user who runs this (also in context)
	UserID string `protobuf:"bytes,3,opt,name=UserID" json:"UserID,omitempty"`
	// serialised context
	Context string `protobuf:"bytes,4,opt,name=Context" json:"Context,omitempty"`
	// defines what this 'logentry' does/did. See gitserver source for specifics
	Action uint32 `protobuf:"varint,5,opt,name=Action" json:"Action,omitempty"`
	// true if this succeeded
	Success bool `protobuf:"varint,6,opt,name=Success" json:"Success,omitempty"`
	// if !success, here's the error message
	ErrorMessage     string `protobuf:"bytes,7,opt,name=ErrorMessage" json:"ErrorMessage,omitempty"`
	Started          uint32 `protobuf:"varint,8,opt,name=Started" json:"Started,omitempty"`
	Finished         uint32 `protobuf:"varint,9,opt,name=Finished" json:"Finished,omitempty"`
	AssociationToken string `protobuf:"bytes,10,opt,name=AssociationToken" json:"AssociationToken,omitempty"`
}

func (m *CreateRepoLog) Reset()                    { *m = CreateRepoLog{} }
func (m *CreateRepoLog) String() string            { return proto.CompactTextString(m) }
func (*CreateRepoLog) ProtoMessage()               {}
func (*CreateRepoLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateRepoLog) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CreateRepoLog) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

func (m *CreateRepoLog) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *CreateRepoLog) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *CreateRepoLog) GetAction() uint32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *CreateRepoLog) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CreateRepoLog) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateRepoLog) GetStarted() uint32 {
	if m != nil {
		return m.Started
	}
	return 0
}

func (m *CreateRepoLog) GetFinished() uint32 {
	if m != nil {
		return m.Finished
	}
	return 0
}

func (m *CreateRepoLog) GetAssociationToken() string {
	if m != nil {
		return m.AssociationToken
	}
	return ""
}

type Build struct {
	ID           uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	RepositoryID uint64 `protobuf:"varint,2,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
	CommitHash   string `protobuf:"bytes,3,opt,name=CommitHash" json:"CommitHash,omitempty"`
	Branch       string `protobuf:"bytes,4,opt,name=Branch" json:"Branch,omitempty"`
	LogMessage   string `protobuf:"bytes,5,opt,name=LogMessage" json:"LogMessage,omitempty"`
	UserID       string `protobuf:"bytes,6,opt,name=UserID" json:"UserID,omitempty"`
	Timestamp    uint32 `protobuf:"varint,7,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Success      bool   `protobuf:"varint,8,opt,name=Success" json:"Success,omitempty"`
}

func (m *Build) Reset()                    { *m = Build{} }
func (m *Build) String() string            { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()               {}
func (*Build) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Build) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Build) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

func (m *Build) GetCommitHash() string {
	if m != nil {
		return m.CommitHash
	}
	return ""
}

func (m *Build) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *Build) GetLogMessage() string {
	if m != nil {
		return m.LogMessage
	}
	return ""
}

func (m *Build) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Build) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Build) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type BuildList struct {
	Builds []*Build `protobuf:"bytes,1,rep,name=Builds" json:"Builds,omitempty"`
}

func (m *BuildList) Reset()                    { *m = BuildList{} }
func (m *BuildList) String() string            { return proto.CompactTextString(m) }
func (*BuildList) ProtoMessage()               {}
func (*BuildList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BuildList) GetBuilds() []*Build {
	if m != nil {
		return m.Builds
	}
	return nil
}

type RepositoryList struct {
	Repos []*Repository `protobuf:"bytes,1,rep,name=Repos" json:"Repos,omitempty"`
}

func (m *RepositoryList) Reset()                    { *m = RepositoryList{} }
func (m *RepositoryList) String() string            { return proto.CompactTextString(m) }
func (*RepositoryList) ProtoMessage()               {}
func (*RepositoryList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RepositoryList) GetRepos() []*Repository {
	if m != nil {
		return m.Repos
	}
	return nil
}

type Permission struct {
	Read    bool `protobuf:"varint,1,opt,name=Read" json:"Read,omitempty"`
	Write   bool `protobuf:"varint,2,opt,name=Write" json:"Write,omitempty"`
	Execute bool `protobuf:"varint,3,opt,name=Execute" json:"Execute,omitempty"`
	List    bool `protobuf:"varint,4,opt,name=List" json:"List,omitempty"`
}

func (m *Permission) Reset()                    { *m = Permission{} }
func (m *Permission) String() string            { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()               {}
func (*Permission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Permission) GetRead() bool {
	if m != nil {
		return m.Read
	}
	return false
}

func (m *Permission) GetWrite() bool {
	if m != nil {
		return m.Write
	}
	return false
}

func (m *Permission) GetExecute() bool {
	if m != nil {
		return m.Execute
	}
	return false
}

func (m *Permission) GetList() bool {
	if m != nil {
		return m.List
	}
	return false
}

//
// A "watcher" is someone who watches pushes to a given repository.
// Note that pushes by "oneself" will not be notified.
// Otherwise each push will be send via slack
type Watchers struct {
	ID           uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	UserID       string `protobuf:"bytes,2,opt,name=UserID" json:"UserID,omitempty"`
	RepositoryID uint64 `protobuf:"varint,3,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
	Notifytype   uint32 `protobuf:"varint,4,opt,name=Notifytype" json:"Notifytype,omitempty"`
}

func (m *Watchers) Reset()                    { *m = Watchers{} }
func (m *Watchers) String() string            { return proto.CompactTextString(m) }
func (*Watchers) ProtoMessage()               {}
func (*Watchers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Watchers) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Watchers) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Watchers) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

func (m *Watchers) GetNotifytype() uint32 {
	if m != nil {
		return m.Notifytype
	}
	return 0
}

type Repository struct {
	ID           uint64      `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	RepoName     string      `protobuf:"bytes,2,opt,name=RepoName" json:"RepoName,omitempty"`
	OwnerID      string      `protobuf:"bytes,3,opt,name=OwnerID" json:"OwnerID,omitempty"`
	ArtefactName string      `protobuf:"bytes,4,opt,name=ArtefactName" json:"ArtefactName,omitempty"`
	Permission   *Permission `protobuf:"bytes,5,opt,name=Permission" json:"Permission,omitempty"`
}

func (m *Repository) Reset()                    { *m = Repository{} }
func (m *Repository) String() string            { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()               {}
func (*Repository) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Repository) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Repository) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *Repository) GetOwnerID() string {
	if m != nil {
		return m.OwnerID
	}
	return ""
}

func (m *Repository) GetArtefactName() string {
	if m != nil {
		return m.ArtefactName
	}
	return ""
}

func (m *Repository) GetPermission() *Permission {
	if m != nil {
		return m.Permission
	}
	return nil
}

type GroupRepositoryAccess struct {
	ID      uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	RepoID  uint64 `protobuf:"varint,2,opt,name=RepoID" json:"RepoID,omitempty"`
	GroupID string `protobuf:"bytes,3,opt,name=GroupID" json:"GroupID,omitempty"`
	Read    bool   `protobuf:"varint,4,opt,name=Read" json:"Read,omitempty"`
	Write   bool   `protobuf:"varint,5,opt,name=Write" json:"Write,omitempty"`
}

func (m *GroupRepositoryAccess) Reset()                    { *m = GroupRepositoryAccess{} }
func (m *GroupRepositoryAccess) String() string            { return proto.CompactTextString(m) }
func (*GroupRepositoryAccess) ProtoMessage()               {}
func (*GroupRepositoryAccess) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GroupRepositoryAccess) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *GroupRepositoryAccess) GetRepoID() uint64 {
	if m != nil {
		return m.RepoID
	}
	return 0
}

func (m *GroupRepositoryAccess) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *GroupRepositoryAccess) GetRead() bool {
	if m != nil {
		return m.Read
	}
	return false
}

func (m *GroupRepositoryAccess) GetWrite() bool {
	if m != nil {
		return m.Write
	}
	return false
}

type UserRepositoryAccess struct {
	ID     uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	RepoID uint64 `protobuf:"varint,2,opt,name=RepoID" json:"RepoID,omitempty"`
	UserID string `protobuf:"bytes,3,opt,name=UserID" json:"UserID,omitempty"`
	Read   bool   `protobuf:"varint,4,opt,name=Read" json:"Read,omitempty"`
	Write  bool   `protobuf:"varint,5,opt,name=Write" json:"Write,omitempty"`
}

func (m *UserRepositoryAccess) Reset()                    { *m = UserRepositoryAccess{} }
func (m *UserRepositoryAccess) String() string            { return proto.CompactTextString(m) }
func (*UserRepositoryAccess) ProtoMessage()               {}
func (*UserRepositoryAccess) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UserRepositoryAccess) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UserRepositoryAccess) GetRepoID() uint64 {
	if m != nil {
		return m.RepoID
	}
	return 0
}

func (m *UserRepositoryAccess) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UserRepositoryAccess) GetRead() bool {
	if m != nil {
		return m.Read
	}
	return false
}

func (m *UserRepositoryAccess) GetWrite() bool {
	if m != nil {
		return m.Write
	}
	return false
}

type PostReceiveRequest struct {
	RepoDirectory string `protobuf:"bytes,1,opt,name=RepoDirectory" json:"RepoDirectory,omitempty"`
	Ref           string `protobuf:"bytes,2,opt,name=Ref" json:"Ref,omitempty"`
	OldRevision   string `protobuf:"bytes,3,opt,name=OldRevision" json:"OldRevision,omitempty"`
	NewRevision   string `protobuf:"bytes,4,opt,name=NewRevision" json:"NewRevision,omitempty"`
}

func (m *PostReceiveRequest) Reset()                    { *m = PostReceiveRequest{} }
func (m *PostReceiveRequest) String() string            { return proto.CompactTextString(m) }
func (*PostReceiveRequest) ProtoMessage()               {}
func (*PostReceiveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PostReceiveRequest) GetRepoDirectory() string {
	if m != nil {
		return m.RepoDirectory
	}
	return ""
}

func (m *PostReceiveRequest) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *PostReceiveRequest) GetOldRevision() string {
	if m != nil {
		return m.OldRevision
	}
	return ""
}

func (m *PostReceiveRequest) GetNewRevision() string {
	if m != nil {
		return m.NewRevision
	}
	return ""
}

type PostReceiveStream struct {
}

func (m *PostReceiveStream) Reset()                    { *m = PostReceiveStream{} }
func (m *PostReceiveStream) String() string            { return proto.CompactTextString(m) }
func (*PostReceiveStream) ProtoMessage()               {}
func (*PostReceiveStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type ByIDRequest struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *ByIDRequest) Reset()                    { *m = ByIDRequest{} }
func (m *ByIDRequest) String() string            { return proto.CompactTextString(m) }
func (*ByIDRequest) ProtoMessage()               {}
func (*ByIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ByIDRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type ByURLRequest struct {
	URL string `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
}

func (m *ByURLRequest) Reset()                    { *m = ByURLRequest{} }
func (m *ByURLRequest) String() string            { return proto.CompactTextString(m) }
func (*ByURLRequest) ProtoMessage()               {}
func (*ByURLRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ByURLRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

type RepositoryInfo struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=Repository" json:"Repository,omitempty"`
}

func (m *RepositoryInfo) Reset()                    { *m = RepositoryInfo{} }
func (m *RepositoryInfo) String() string            { return proto.CompactTextString(m) }
func (*RepositoryInfo) ProtoMessage()               {}
func (*RepositoryInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *RepositoryInfo) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

// this message is passed through the CGI as environment variable back to the builder
type GitInfo struct {
	RepositoryID uint64     `protobuf:"varint,1,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
	UserID       string     `protobuf:"bytes,2,opt,name=UserID" json:"UserID,omitempty"`
	User         *auth.User `protobuf:"bytes,3,opt,name=User" json:"User,omitempty"`
	Version      uint32     `protobuf:"varint,4,opt,name=Version" json:"Version,omitempty"`
	URL          string     `protobuf:"bytes,5,opt,name=URL" json:"URL,omitempty"`
}

func (m *GitInfo) Reset()                    { *m = GitInfo{} }
func (m *GitInfo) String() string            { return proto.CompactTextString(m) }
func (*GitInfo) ProtoMessage()               {}
func (*GitInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GitInfo) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

func (m *GitInfo) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GitInfo) GetUser() *auth.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GitInfo) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GitInfo) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

type CreateRepoRequest struct {
	ArtefactName string               `protobuf:"bytes,1,opt,name=ArtefactName" json:"ArtefactName,omitempty"`
	URL          *SourceRepositoryURL `protobuf:"bytes,2,opt,name=URL" json:"URL,omitempty"`
	Description  string               `protobuf:"bytes,3,opt,name=Description" json:"Description,omitempty"`
}

func (m *CreateRepoRequest) Reset()                    { *m = CreateRepoRequest{} }
func (m *CreateRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRepoRequest) ProtoMessage()               {}
func (*CreateRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CreateRepoRequest) GetArtefactName() string {
	if m != nil {
		return m.ArtefactName
	}
	return ""
}

func (m *CreateRepoRequest) GetURL() *SourceRepositoryURL {
	if m != nil {
		return m.URL
	}
	return nil
}

func (m *CreateRepoRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// stored in database. Maps a URL to a filepath and a unique ID
type SourceRepository struct {
	ID           uint64                 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	FilePath     string                 `protobuf:"bytes,2,opt,name=FilePath" json:"FilePath,omitempty"`
	URLs         []*SourceRepositoryURL `protobuf:"bytes,3,rep,name=URLs" json:"URLs,omitempty"`
	ArtefactName string                 `protobuf:"bytes,4,opt,name=ArtefactName" json:"ArtefactName,omitempty"`
	// if true: run the post-receive hook
	RunPostReceive bool `protobuf:"varint,5,opt,name=RunPostReceive" json:"RunPostReceive,omitempty"`
	// if true: run the pre-receive hook
	RunPreReceive        bool   `protobuf:"varint,6,opt,name=RunPreReceive" json:"RunPreReceive,omitempty"`
	CreatedComplete      bool   `protobuf:"varint,7,opt,name=CreatedComplete" json:"CreatedComplete,omitempty"`
	Description          string `protobuf:"bytes,8,opt,name=Description" json:"Description,omitempty"`
	UserCommits          uint64 `protobuf:"varint,9,opt,name=UserCommits" json:"UserCommits,omitempty"`
	Deleted              bool   `protobuf:"varint,10,opt,name=Deleted" json:"Deleted,omitempty"`
	DeletedTimestamp     uint32 `protobuf:"varint,11,opt,name=DeletedTimestamp" json:"DeletedTimestamp,omitempty"`
	DeleteUser           string `protobuf:"bytes,12,opt,name=DeleteUser" json:"DeleteUser,omitempty"`
	LastCommit           uint32 `protobuf:"varint,13,opt,name=LastCommit" json:"LastCommit,omitempty"`
	LastCommitUser       string `protobuf:"bytes,14,opt,name=LastCommitUser" json:"LastCommitUser,omitempty"`
	Tags                 uint32 `protobuf:"varint,15,opt,name=Tags" json:"Tags,omitempty"`
	Forking              bool   `protobuf:"varint,16,opt,name=Forking" json:"Forking,omitempty"`
	ForkedFrom           uint64 `protobuf:"varint,17,opt,name=ForkedFrom" json:"ForkedFrom,omitempty"`
	BuildRoutingTagName  string `protobuf:"bytes,18,opt,name=BuildRoutingTagName" json:"BuildRoutingTagName,omitempty"`
	BuildRoutingTagValue string `protobuf:"bytes,19,opt,name=BuildRoutingTagValue" json:"BuildRoutingTagValue,omitempty"`
	ReadOnly             bool   `protobuf:"varint,20,opt,name=ReadOnly" json:"ReadOnly,omitempty"`
	CreateUser           string `protobuf:"bytes,21,opt,name=CreateUser" json:"CreateUser,omitempty"`
}

func (m *SourceRepository) Reset()                    { *m = SourceRepository{} }
func (m *SourceRepository) String() string            { return proto.CompactTextString(m) }
func (*SourceRepository) ProtoMessage()               {}
func (*SourceRepository) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *SourceRepository) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SourceRepository) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *SourceRepository) GetURLs() []*SourceRepositoryURL {
	if m != nil {
		return m.URLs
	}
	return nil
}

func (m *SourceRepository) GetArtefactName() string {
	if m != nil {
		return m.ArtefactName
	}
	return ""
}

func (m *SourceRepository) GetRunPostReceive() bool {
	if m != nil {
		return m.RunPostReceive
	}
	return false
}

func (m *SourceRepository) GetRunPreReceive() bool {
	if m != nil {
		return m.RunPreReceive
	}
	return false
}

func (m *SourceRepository) GetCreatedComplete() bool {
	if m != nil {
		return m.CreatedComplete
	}
	return false
}

func (m *SourceRepository) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SourceRepository) GetUserCommits() uint64 {
	if m != nil {
		return m.UserCommits
	}
	return 0
}

func (m *SourceRepository) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *SourceRepository) GetDeletedTimestamp() uint32 {
	if m != nil {
		return m.DeletedTimestamp
	}
	return 0
}

func (m *SourceRepository) GetDeleteUser() string {
	if m != nil {
		return m.DeleteUser
	}
	return ""
}

func (m *SourceRepository) GetLastCommit() uint32 {
	if m != nil {
		return m.LastCommit
	}
	return 0
}

func (m *SourceRepository) GetLastCommitUser() string {
	if m != nil {
		return m.LastCommitUser
	}
	return ""
}

func (m *SourceRepository) GetTags() uint32 {
	if m != nil {
		return m.Tags
	}
	return 0
}

func (m *SourceRepository) GetForking() bool {
	if m != nil {
		return m.Forking
	}
	return false
}

func (m *SourceRepository) GetForkedFrom() uint64 {
	if m != nil {
		return m.ForkedFrom
	}
	return 0
}

func (m *SourceRepository) GetBuildRoutingTagName() string {
	if m != nil {
		return m.BuildRoutingTagName
	}
	return ""
}

func (m *SourceRepository) GetBuildRoutingTagValue() string {
	if m != nil {
		return m.BuildRoutingTagValue
	}
	return ""
}

func (m *SourceRepository) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *SourceRepository) GetCreateUser() string {
	if m != nil {
		return m.CreateUser
	}
	return ""
}

// the URL a given repository can be accessed under.
// Note: Repositories may be accessed under multiple different URLs
type SourceRepositoryURL struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	// the Repository we're referring to on disk
	V2RepositoryID uint64 `protobuf:"varint,2,opt,name=V2RepositoryID" json:"V2RepositoryID,omitempty"`
	// which Host do we expose this on, e.g. "git.singingcat.net"
	Host string `protobuf:"bytes,3,opt,name=Host" json:"Host,omitempty"`
	// which path do we expose this on, e.g. "/git/foobar.git"
	Path string `protobuf:"bytes,4,opt,name=Path" json:"Path,omitempty"`
}

func (m *SourceRepositoryURL) Reset()                    { *m = SourceRepositoryURL{} }
func (m *SourceRepositoryURL) String() string            { return proto.CompactTextString(m) }
func (*SourceRepositoryURL) ProtoMessage()               {}
func (*SourceRepositoryURL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *SourceRepositoryURL) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SourceRepositoryURL) GetV2RepositoryID() uint64 {
	if m != nil {
		return m.V2RepositoryID
	}
	return 0
}

func (m *SourceRepositoryURL) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *SourceRepositoryURL) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type SourceRepositoryList struct {
	Repos []*SourceRepository `protobuf:"bytes,1,rep,name=Repos" json:"Repos,omitempty"`
}

func (m *SourceRepositoryList) Reset()                    { *m = SourceRepositoryList{} }
func (m *SourceRepositoryList) String() string            { return proto.CompactTextString(m) }
func (*SourceRepositoryList) ProtoMessage()               {}
func (*SourceRepositoryList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *SourceRepositoryList) GetRepos() []*SourceRepository {
	if m != nil {
		return m.Repos
	}
	return nil
}

//
// service OLDGIT {
// // deprecated and obsolete: get a repo by ID
// rpc RepoByID(ByIDRequest) returns (RepositoryInfo);
// // deprecated and obsolete: called by git post receive hook
// rpc PostReceive(PostReceiveRequest) returns (stream PostReceiveStream);
// //  deprecated and obsolete: get all repos we got access to
// rpc GetRepos(common.Void) returns (RepositoryList);
// //  deprecated and obsolete: we sometimes hit it badly...
// rpc GetCPULoad(common.Void) returns (common.CPULoad);
// //  deprecated and obsolete: fork a repo, returns ID of new repo
// rpc Fork(ByIDRequest) returns (Repository);
// }
type SetRepoFlagsRequest struct {
	RepoID         uint64 `protobuf:"varint,1,opt,name=RepoID" json:"RepoID,omitempty"`
	RunPostReceive bool   `protobuf:"varint,2,opt,name=RunPostReceive" json:"RunPostReceive,omitempty"`
	RunPreReceive  bool   `protobuf:"varint,3,opt,name=RunPreReceive" json:"RunPreReceive,omitempty"`
	ReadOnly       bool   `protobuf:"varint,4,opt,name=ReadOnly" json:"ReadOnly,omitempty"`
}

func (m *SetRepoFlagsRequest) Reset()                    { *m = SetRepoFlagsRequest{} }
func (m *SetRepoFlagsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRepoFlagsRequest) ProtoMessage()               {}
func (*SetRepoFlagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *SetRepoFlagsRequest) GetRepoID() uint64 {
	if m != nil {
		return m.RepoID
	}
	return 0
}

func (m *SetRepoFlagsRequest) GetRunPostReceive() bool {
	if m != nil {
		return m.RunPostReceive
	}
	return false
}

func (m *SetRepoFlagsRequest) GetRunPreReceive() bool {
	if m != nil {
		return m.RunPreReceive
	}
	return false
}

func (m *SetRepoFlagsRequest) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

type ForkRequest struct {
	RepositoryID   uint64               `protobuf:"varint,1,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
	ArtefactName   string               `protobuf:"bytes,2,opt,name=ArtefactName" json:"ArtefactName,omitempty"`
	URL            *SourceRepositoryURL `protobuf:"bytes,3,opt,name=URL" json:"URL,omitempty"`
	Description    string               `protobuf:"bytes,4,opt,name=Description" json:"Description,omitempty"`
	CreateReadOnly bool                 `protobuf:"varint,5,opt,name=CreateReadOnly" json:"CreateReadOnly,omitempty"`
}

func (m *ForkRequest) Reset()                    { *m = ForkRequest{} }
func (m *ForkRequest) String() string            { return proto.CompactTextString(m) }
func (*ForkRequest) ProtoMessage()               {}
func (*ForkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ForkRequest) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

func (m *ForkRequest) GetArtefactName() string {
	if m != nil {
		return m.ArtefactName
	}
	return ""
}

func (m *ForkRequest) GetURL() *SourceRepositoryURL {
	if m != nil {
		return m.URL
	}
	return nil
}

func (m *ForkRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ForkRequest) GetCreateReadOnly() bool {
	if m != nil {
		return m.CreateReadOnly
	}
	return false
}

type PingState struct {
	ID               uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	AssociationToken string `protobuf:"bytes,2,opt,name=AssociationToken" json:"AssociationToken,omitempty"`
	Created          uint32 `protobuf:"varint,3,opt,name=Created" json:"Created,omitempty"`
	ResponseToken    string `protobuf:"bytes,4,opt,name=ResponseToken" json:"ResponseToken,omitempty"`
}

func (m *PingState) Reset()                    { *m = PingState{} }
func (m *PingState) String() string            { return proto.CompactTextString(m) }
func (*PingState) ProtoMessage()               {}
func (*PingState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *PingState) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PingState) GetAssociationToken() string {
	if m != nil {
		return m.AssociationToken
	}
	return ""
}

func (m *PingState) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *PingState) GetResponseToken() string {
	if m != nil {
		return m.ResponseToken
	}
	return ""
}

type CheckGitRequest struct {
	Host string `protobuf:"bytes,1,opt,name=Host" json:"Host,omitempty"`
}

func (m *CheckGitRequest) Reset()                    { *m = CheckGitRequest{} }
func (m *CheckGitRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckGitRequest) ProtoMessage()               {}
func (*CheckGitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CheckGitRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type CheckGitResponse struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *CheckGitResponse) Reset()                    { *m = CheckGitResponse{} }
func (m *CheckGitResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckGitResponse) ProtoMessage()               {}
func (*CheckGitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CheckGitResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RepoFilter struct {
	Tags *RepoTagRequest `protobuf:"bytes,1,opt,name=Tags" json:"Tags,omitempty"`
}

func (m *RepoFilter) Reset()                    { *m = RepoFilter{} }
func (m *RepoFilter) String() string            { return proto.CompactTextString(m) }
func (*RepoFilter) ProtoMessage()               {}
func (*RepoFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *RepoFilter) GetTags() *RepoTagRequest {
	if m != nil {
		return m.Tags
	}
	return nil
}

type UpdateRepoStatusRequest struct {
	RepoID   uint64       `protobuf:"varint,1,opt,name=RepoID" json:"RepoID,omitempty"`
	ReadOnly NewRepoState `protobuf:"varint,2,opt,name=ReadOnly,enum=gitserver.NewRepoState" json:"ReadOnly,omitempty"`
	RunHooks NewRepoState `protobuf:"varint,3,opt,name=RunHooks,enum=gitserver.NewRepoState" json:"RunHooks,omitempty"`
}

func (m *UpdateRepoStatusRequest) Reset()                    { *m = UpdateRepoStatusRequest{} }
func (m *UpdateRepoStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRepoStatusRequest) ProtoMessage()               {}
func (*UpdateRepoStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *UpdateRepoStatusRequest) GetRepoID() uint64 {
	if m != nil {
		return m.RepoID
	}
	return 0
}

func (m *UpdateRepoStatusRequest) GetReadOnly() NewRepoState {
	if m != nil {
		return m.ReadOnly
	}
	return NewRepoState_NOCHANGE
}

func (m *UpdateRepoStatusRequest) GetRunHooks() NewRepoState {
	if m != nil {
		return m.RunHooks
	}
	return NewRepoState_NOCHANGE
}

// ask server to execute a hook
type HookRequest struct {
	RequestKey string `protobuf:"bytes,1,opt,name=RequestKey" json:"RequestKey,omitempty"`
	NewRev     string `protobuf:"bytes,2,opt,name=NewRev" json:"NewRev,omitempty"`
	OldRev     string `protobuf:"bytes,3,opt,name=OldRev" json:"OldRev,omitempty"`
	HookName   string `protobuf:"bytes,4,opt,name=HookName" json:"HookName,omitempty"`
}

func (m *HookRequest) Reset()                    { *m = HookRequest{} }
func (m *HookRequest) String() string            { return proto.CompactTextString(m) }
func (*HookRequest) ProtoMessage()               {}
func (*HookRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *HookRequest) GetRequestKey() string {
	if m != nil {
		return m.RequestKey
	}
	return ""
}

func (m *HookRequest) GetNewRev() string {
	if m != nil {
		return m.NewRev
	}
	return ""
}

func (m *HookRequest) GetOldRev() string {
	if m != nil {
		return m.OldRev
	}
	return ""
}

func (m *HookRequest) GetHookName() string {
	if m != nil {
		return m.HookName
	}
	return ""
}

type HookResponse struct {
	ErrorMessage string `protobuf:"bytes,1,opt,name=ErrorMessage" json:"ErrorMessage,omitempty"`
	Output       string `protobuf:"bytes,2,opt,name=Output" json:"Output,omitempty"`
}

func (m *HookResponse) Reset()                    { *m = HookResponse{} }
func (m *HookResponse) String() string            { return proto.CompactTextString(m) }
func (*HookResponse) ProtoMessage()               {}
func (*HookResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *HookResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *HookResponse) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

// data request to update a repo
type RepoUpdateRequest struct {
	Original    *SourceRepository `protobuf:"bytes,1,opt,name=Original" json:"Original,omitempty"`
	Description string            `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
	AddURLHost  string            `protobuf:"bytes,3,opt,name=AddURLHost" json:"AddURLHost,omitempty"`
	AddURLPath  string            `protobuf:"bytes,4,opt,name=AddURLPath" json:"AddURLPath,omitempty"`
}

func (m *RepoUpdateRequest) Reset()                    { *m = RepoUpdateRequest{} }
func (m *RepoUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*RepoUpdateRequest) ProtoMessage()               {}
func (*RepoUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *RepoUpdateRequest) GetOriginal() *SourceRepository {
	if m != nil {
		return m.Original
	}
	return nil
}

func (m *RepoUpdateRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RepoUpdateRequest) GetAddURLHost() string {
	if m != nil {
		return m.AddURLHost
	}
	return ""
}

func (m *RepoUpdateRequest) GetAddURLPath() string {
	if m != nil {
		return m.AddURLPath
	}
	return ""
}

type SourceRepositoryResponse struct {
	Found      bool              `protobuf:"varint,1,opt,name=Found" json:"Found,omitempty"`
	Repository *SourceRepository `protobuf:"bytes,2,opt,name=Repository" json:"Repository,omitempty"`
}

func (m *SourceRepositoryResponse) Reset()                    { *m = SourceRepositoryResponse{} }
func (m *SourceRepositoryResponse) String() string            { return proto.CompactTextString(m) }
func (*SourceRepositoryResponse) ProtoMessage()               {}
func (*SourceRepositoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *SourceRepositoryResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

func (m *SourceRepositoryResponse) GetRepository() *SourceRepository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type GitCredentialsRequest struct {
	Args        []string `protobuf:"bytes,1,rep,name=Args" json:"Args,omitempty"`
	Environment []string `protobuf:"bytes,2,rep,name=Environment" json:"Environment,omitempty"`
	Stdin       string   `protobuf:"bytes,3,opt,name=Stdin" json:"Stdin,omitempty"`
}

func (m *GitCredentialsRequest) Reset()                    { *m = GitCredentialsRequest{} }
func (m *GitCredentialsRequest) String() string            { return proto.CompactTextString(m) }
func (*GitCredentialsRequest) ProtoMessage()               {}
func (*GitCredentialsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *GitCredentialsRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *GitCredentialsRequest) GetEnvironment() []string {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *GitCredentialsRequest) GetStdin() string {
	if m != nil {
		return m.Stdin
	}
	return ""
}

type GitCredentialsResponse struct {
	Stdout string `protobuf:"bytes,1,opt,name=Stdout" json:"Stdout,omitempty"`
}

func (m *GitCredentialsResponse) Reset()                    { *m = GitCredentialsResponse{} }
func (m *GitCredentialsResponse) String() string            { return proto.CompactTextString(m) }
func (*GitCredentialsResponse) ProtoMessage()               {}
func (*GitCredentialsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *GitCredentialsResponse) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func init() {
	proto.RegisterType((*GitCredentials)(nil), "gitserver.GitCredentials")
	proto.RegisterType((*RepoTagRequest)(nil), "gitserver.RepoTagRequest")
	proto.RegisterType((*CreateRepoLog)(nil), "gitserver.CreateRepoLog")
	proto.RegisterType((*Build)(nil), "gitserver.Build")
	proto.RegisterType((*BuildList)(nil), "gitserver.BuildList")
	proto.RegisterType((*RepositoryList)(nil), "gitserver.RepositoryList")
	proto.RegisterType((*Permission)(nil), "gitserver.Permission")
	proto.RegisterType((*Watchers)(nil), "gitserver.Watchers")
	proto.RegisterType((*Repository)(nil), "gitserver.Repository")
	proto.RegisterType((*GroupRepositoryAccess)(nil), "gitserver.GroupRepositoryAccess")
	proto.RegisterType((*UserRepositoryAccess)(nil), "gitserver.UserRepositoryAccess")
	proto.RegisterType((*PostReceiveRequest)(nil), "gitserver.PostReceiveRequest")
	proto.RegisterType((*PostReceiveStream)(nil), "gitserver.PostReceiveStream")
	proto.RegisterType((*ByIDRequest)(nil), "gitserver.ByIDRequest")
	proto.RegisterType((*ByURLRequest)(nil), "gitserver.ByURLRequest")
	proto.RegisterType((*RepositoryInfo)(nil), "gitserver.RepositoryInfo")
	proto.RegisterType((*GitInfo)(nil), "gitserver.GitInfo")
	proto.RegisterType((*CreateRepoRequest)(nil), "gitserver.CreateRepoRequest")
	proto.RegisterType((*SourceRepository)(nil), "gitserver.SourceRepository")
	proto.RegisterType((*SourceRepositoryURL)(nil), "gitserver.SourceRepositoryURL")
	proto.RegisterType((*SourceRepositoryList)(nil), "gitserver.SourceRepositoryList")
	proto.RegisterType((*SetRepoFlagsRequest)(nil), "gitserver.SetRepoFlagsRequest")
	proto.RegisterType((*ForkRequest)(nil), "gitserver.ForkRequest")
	proto.RegisterType((*PingState)(nil), "gitserver.PingState")
	proto.RegisterType((*CheckGitRequest)(nil), "gitserver.CheckGitRequest")
	proto.RegisterType((*CheckGitResponse)(nil), "gitserver.CheckGitResponse")
	proto.RegisterType((*RepoFilter)(nil), "gitserver.RepoFilter")
	proto.RegisterType((*UpdateRepoStatusRequest)(nil), "gitserver.UpdateRepoStatusRequest")
	proto.RegisterType((*HookRequest)(nil), "gitserver.HookRequest")
	proto.RegisterType((*HookResponse)(nil), "gitserver.HookResponse")
	proto.RegisterType((*RepoUpdateRequest)(nil), "gitserver.RepoUpdateRequest")
	proto.RegisterType((*SourceRepositoryResponse)(nil), "gitserver.SourceRepositoryResponse")
	proto.RegisterType((*GitCredentialsRequest)(nil), "gitserver.GitCredentialsRequest")
	proto.RegisterType((*GitCredentialsResponse)(nil), "gitserver.GitCredentialsResponse")
	proto.RegisterEnum("gitserver.REPOTAG", REPOTAG_name, REPOTAG_value)
	proto.RegisterEnum("gitserver.NewRepoState", NewRepoState_name, NewRepoState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GIT2 service

type GIT2Client interface {
	// check if there is a git server listening on that host
	CheckGitServer(ctx context.Context, in *CheckGitRequest, opts ...grpc.CallOption) (*CheckGitResponse, error)
	// get a repo by ID
	RepoByID(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*SourceRepository, error)
	// get a repo by URL, error if none found
	RepoByURL(ctx context.Context, in *ByURLRequest, opts ...grpc.CallOption) (*SourceRepository, error)
	// fork a repo, returns ID of new repo
	Fork(ctx context.Context, in *ForkRequest, opts ...grpc.CallOption) (*SourceRepository, error)
	// get all repos current user got access to. (Note: This is a global list, no longer "per gitserver"
	GetRepos(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*SourceRepositoryList, error)
	// create a new bare git repo
	CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*SourceRepository, error)
	SetRepoFlags(ctx context.Context, in *SetRepoFlagsRequest, opts ...grpc.CallOption) (*common.Void, error)
	// mark this repository as complete. This is limited to repobuilder only
	RepoBuilderComplete(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*common.Void, error)
	// reset this repository.  This is limited to repobuilder only and specific repositories. It serves to re-use test repositories. It resets the contents to
	// "bare" (but not the URL)
	ResetRepository(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*common.Void, error)
	// delete a repository. it'll be gone thereafter
	DeleteRepository(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*common.Void, error)
	// get repos with specific flags
	GetReposTags(ctx context.Context, in *RepoTagRequest, opts ...grpc.CallOption) (*SourceRepositoryList, error)
	// get recent builds
	GetRecentBuilds(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*BuildList, error)
	// get most recent build
	GetLatestBuild(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*Build, error)
	// make repobuilder no longer read-only
	UpdateRepoStatus(ctx context.Context, in *UpdateRepoStatusRequest, opts ...grpc.CallOption) (*SourceRepository, error)
	// run a hook. this is invoked from git:/hooks/[scriptname]->git-hook binary->gRPC and subject to special restrictions,
	RunLocalHook(ctx context.Context, in *HookRequest, opts ...grpc.CallOption) (GIT2_RunLocalHookClient, error)
	// update git repository
	GitRepoUpdate(ctx context.Context, in *RepoUpdateRequest, opts ...grpc.CallOption) (*SourceRepository, error)
	// find a repo by URL, return nil if none
	FindRepoByURL(ctx context.Context, in *ByURLRequest, opts ...grpc.CallOption) (*SourceRepositoryResponse, error)
	//
	// rebuild - this does not necessarily mean the result can be stored in the build repo archive though
	// The "Rebuild" will attempt to store the result in the buildrepository under the Named BuildID. The
	// Build Repository will - normally - reject this (builds are immutable). This can, however, be useful to
	// verify if configuration changes on the buildserver result in a successful build.
	Rebuild(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (GIT2_RebuildClient, error)
}

type gIT2Client struct {
	cc *grpc.ClientConn
}

func NewGIT2Client(cc *grpc.ClientConn) GIT2Client {
	return &gIT2Client{cc}
}

func (c *gIT2Client) CheckGitServer(ctx context.Context, in *CheckGitRequest, opts ...grpc.CallOption) (*CheckGitResponse, error) {
	out := new(CheckGitResponse)
	err := grpc.Invoke(ctx, "/gitserver.GIT2/CheckGitServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gIT2Client) RepoByID(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*SourceRepository, error) {
	out := new(SourceRepository)
	err := grpc.Invoke(ctx, "/gitserver.GIT2/RepoByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gIT2Client) RepoByURL(ctx context.Context, in *ByURLRequest, opts ...grpc.CallOption) (*SourceRepository, error) {
	out := new(SourceRepository)
	err := grpc.Invoke(ctx, "/gitserver.GIT2/RepoByURL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gIT2Client) Fork(ctx context.Context, in *ForkRequest, opts ...grpc.CallOption) (*SourceRepository, error) {
	out := new(SourceRepository)
	err := grpc.Invoke(ctx, "/gitserver.GIT2/Fork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gIT2Client) GetRepos(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*SourceRepositoryList, error) {
	out := new(SourceRepositoryList)
	err := grpc.Invoke(ctx, "/gitserver.GIT2/GetRepos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gIT2Client) CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*SourceRepository, error) {
	out := new(SourceRepository)
	err := grpc.Invoke(ctx, "/gitserver.GIT2/CreateRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gIT2Client) SetRepoFlags(ctx context.Context, in *SetRepoFlagsRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/gitserver.GIT2/SetRepoFlags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gIT2Client) RepoBuilderComplete(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/gitserver.GIT2/RepoBuilderComplete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gIT2Client) ResetRepository(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/gitserver.GIT2/ResetRepository", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gIT2Client) DeleteRepository(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/gitserver.GIT2/DeleteRepository", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gIT2Client) GetReposTags(ctx context.Context, in *RepoTagRequest, opts ...grpc.CallOption) (*SourceRepositoryList, error) {
	out := new(SourceRepositoryList)
	err := grpc.Invoke(ctx, "/gitserver.GIT2/GetReposTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gIT2Client) GetRecentBuilds(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*BuildList, error) {
	out := new(BuildList)
	err := grpc.Invoke(ctx, "/gitserver.GIT2/GetRecentBuilds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gIT2Client) GetLatestBuild(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := grpc.Invoke(ctx, "/gitserver.GIT2/GetLatestBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gIT2Client) UpdateRepoStatus(ctx context.Context, in *UpdateRepoStatusRequest, opts ...grpc.CallOption) (*SourceRepository, error) {
	out := new(SourceRepository)
	err := grpc.Invoke(ctx, "/gitserver.GIT2/UpdateRepoStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gIT2Client) RunLocalHook(ctx context.Context, in *HookRequest, opts ...grpc.CallOption) (GIT2_RunLocalHookClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GIT2_serviceDesc.Streams[0], c.cc, "/gitserver.GIT2/RunLocalHook", opts...)
	if err != nil {
		return nil, err
	}
	x := &gIT2RunLocalHookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GIT2_RunLocalHookClient interface {
	Recv() (*HookResponse, error)
	grpc.ClientStream
}

type gIT2RunLocalHookClient struct {
	grpc.ClientStream
}

func (x *gIT2RunLocalHookClient) Recv() (*HookResponse, error) {
	m := new(HookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gIT2Client) GitRepoUpdate(ctx context.Context, in *RepoUpdateRequest, opts ...grpc.CallOption) (*SourceRepository, error) {
	out := new(SourceRepository)
	err := grpc.Invoke(ctx, "/gitserver.GIT2/GitRepoUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gIT2Client) FindRepoByURL(ctx context.Context, in *ByURLRequest, opts ...grpc.CallOption) (*SourceRepositoryResponse, error) {
	out := new(SourceRepositoryResponse)
	err := grpc.Invoke(ctx, "/gitserver.GIT2/FindRepoByURL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gIT2Client) Rebuild(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (GIT2_RebuildClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GIT2_serviceDesc.Streams[1], c.cc, "/gitserver.GIT2/Rebuild", opts...)
	if err != nil {
		return nil, err
	}
	x := &gIT2RebuildClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GIT2_RebuildClient interface {
	Recv() (*HookResponse, error)
	grpc.ClientStream
}

type gIT2RebuildClient struct {
	grpc.ClientStream
}

func (x *gIT2RebuildClient) Recv() (*HookResponse, error) {
	m := new(HookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GIT2 service

type GIT2Server interface {
	// check if there is a git server listening on that host
	CheckGitServer(context.Context, *CheckGitRequest) (*CheckGitResponse, error)
	// get a repo by ID
	RepoByID(context.Context, *ByIDRequest) (*SourceRepository, error)
	// get a repo by URL, error if none found
	RepoByURL(context.Context, *ByURLRequest) (*SourceRepository, error)
	// fork a repo, returns ID of new repo
	Fork(context.Context, *ForkRequest) (*SourceRepository, error)
	// get all repos current user got access to. (Note: This is a global list, no longer "per gitserver"
	GetRepos(context.Context, *common.Void) (*SourceRepositoryList, error)
	// create a new bare git repo
	CreateRepo(context.Context, *CreateRepoRequest) (*SourceRepository, error)
	SetRepoFlags(context.Context, *SetRepoFlagsRequest) (*common.Void, error)
	// mark this repository as complete. This is limited to repobuilder only
	RepoBuilderComplete(context.Context, *ByIDRequest) (*common.Void, error)
	// reset this repository.  This is limited to repobuilder only and specific repositories. It serves to re-use test repositories. It resets the contents to
	// "bare" (but not the URL)
	ResetRepository(context.Context, *ByIDRequest) (*common.Void, error)
	// delete a repository. it'll be gone thereafter
	DeleteRepository(context.Context, *ByIDRequest) (*common.Void, error)
	// get repos with specific flags
	GetReposTags(context.Context, *RepoTagRequest) (*SourceRepositoryList, error)
	// get recent builds
	GetRecentBuilds(context.Context, *ByIDRequest) (*BuildList, error)
	// get most recent build
	GetLatestBuild(context.Context, *ByIDRequest) (*Build, error)
	// make repobuilder no longer read-only
	UpdateRepoStatus(context.Context, *UpdateRepoStatusRequest) (*SourceRepository, error)
	// run a hook. this is invoked from git:/hooks/[scriptname]->git-hook binary->gRPC and subject to special restrictions,
	RunLocalHook(*HookRequest, GIT2_RunLocalHookServer) error
	// update git repository
	GitRepoUpdate(context.Context, *RepoUpdateRequest) (*SourceRepository, error)
	// find a repo by URL, return nil if none
	FindRepoByURL(context.Context, *ByURLRequest) (*SourceRepositoryResponse, error)
	//
	// rebuild - this does not necessarily mean the result can be stored in the build repo archive though
	// The "Rebuild" will attempt to store the result in the buildrepository under the Named BuildID. The
	// Build Repository will - normally - reject this (builds are immutable). This can, however, be useful to
	// verify if configuration changes on the buildserver result in a successful build.
	Rebuild(*ByIDRequest, GIT2_RebuildServer) error
}

func RegisterGIT2Server(s *grpc.Server, srv GIT2Server) {
	s.RegisterService(&_GIT2_serviceDesc, srv)
}

func _GIT2_CheckGitServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckGitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GIT2Server).CheckGitServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitserver.GIT2/CheckGitServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GIT2Server).CheckGitServer(ctx, req.(*CheckGitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIT2_RepoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GIT2Server).RepoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitserver.GIT2/RepoByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GIT2Server).RepoByID(ctx, req.(*ByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIT2_RepoByURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GIT2Server).RepoByURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitserver.GIT2/RepoByURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GIT2Server).RepoByURL(ctx, req.(*ByURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIT2_Fork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GIT2Server).Fork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitserver.GIT2/Fork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GIT2Server).Fork(ctx, req.(*ForkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIT2_GetRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GIT2Server).GetRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitserver.GIT2/GetRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GIT2Server).GetRepos(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIT2_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GIT2Server).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitserver.GIT2/CreateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GIT2Server).CreateRepo(ctx, req.(*CreateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIT2_SetRepoFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRepoFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GIT2Server).SetRepoFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitserver.GIT2/SetRepoFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GIT2Server).SetRepoFlags(ctx, req.(*SetRepoFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIT2_RepoBuilderComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GIT2Server).RepoBuilderComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitserver.GIT2/RepoBuilderComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GIT2Server).RepoBuilderComplete(ctx, req.(*ByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIT2_ResetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GIT2Server).ResetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitserver.GIT2/ResetRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GIT2Server).ResetRepository(ctx, req.(*ByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIT2_DeleteRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GIT2Server).DeleteRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitserver.GIT2/DeleteRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GIT2Server).DeleteRepository(ctx, req.(*ByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIT2_GetReposTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GIT2Server).GetReposTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitserver.GIT2/GetReposTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GIT2Server).GetReposTags(ctx, req.(*RepoTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIT2_GetRecentBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GIT2Server).GetRecentBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitserver.GIT2/GetRecentBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GIT2Server).GetRecentBuilds(ctx, req.(*ByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIT2_GetLatestBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GIT2Server).GetLatestBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitserver.GIT2/GetLatestBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GIT2Server).GetLatestBuild(ctx, req.(*ByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIT2_UpdateRepoStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepoStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GIT2Server).UpdateRepoStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitserver.GIT2/UpdateRepoStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GIT2Server).UpdateRepoStatus(ctx, req.(*UpdateRepoStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIT2_RunLocalHook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HookRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GIT2Server).RunLocalHook(m, &gIT2RunLocalHookServer{stream})
}

type GIT2_RunLocalHookServer interface {
	Send(*HookResponse) error
	grpc.ServerStream
}

type gIT2RunLocalHookServer struct {
	grpc.ServerStream
}

func (x *gIT2RunLocalHookServer) Send(m *HookResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GIT2_GitRepoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GIT2Server).GitRepoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitserver.GIT2/GitRepoUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GIT2Server).GitRepoUpdate(ctx, req.(*RepoUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIT2_FindRepoByURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GIT2Server).FindRepoByURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitserver.GIT2/FindRepoByURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GIT2Server).FindRepoByURL(ctx, req.(*ByURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIT2_Rebuild_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ByIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GIT2Server).Rebuild(m, &gIT2RebuildServer{stream})
}

type GIT2_RebuildServer interface {
	Send(*HookResponse) error
	grpc.ServerStream
}

type gIT2RebuildServer struct {
	grpc.ServerStream
}

func (x *gIT2RebuildServer) Send(m *HookResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _GIT2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitserver.GIT2",
	HandlerType: (*GIT2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckGitServer",
			Handler:    _GIT2_CheckGitServer_Handler,
		},
		{
			MethodName: "RepoByID",
			Handler:    _GIT2_RepoByID_Handler,
		},
		{
			MethodName: "RepoByURL",
			Handler:    _GIT2_RepoByURL_Handler,
		},
		{
			MethodName: "Fork",
			Handler:    _GIT2_Fork_Handler,
		},
		{
			MethodName: "GetRepos",
			Handler:    _GIT2_GetRepos_Handler,
		},
		{
			MethodName: "CreateRepo",
			Handler:    _GIT2_CreateRepo_Handler,
		},
		{
			MethodName: "SetRepoFlags",
			Handler:    _GIT2_SetRepoFlags_Handler,
		},
		{
			MethodName: "RepoBuilderComplete",
			Handler:    _GIT2_RepoBuilderComplete_Handler,
		},
		{
			MethodName: "ResetRepository",
			Handler:    _GIT2_ResetRepository_Handler,
		},
		{
			MethodName: "DeleteRepository",
			Handler:    _GIT2_DeleteRepository_Handler,
		},
		{
			MethodName: "GetReposTags",
			Handler:    _GIT2_GetReposTags_Handler,
		},
		{
			MethodName: "GetRecentBuilds",
			Handler:    _GIT2_GetRecentBuilds_Handler,
		},
		{
			MethodName: "GetLatestBuild",
			Handler:    _GIT2_GetLatestBuild_Handler,
		},
		{
			MethodName: "UpdateRepoStatus",
			Handler:    _GIT2_UpdateRepoStatus_Handler,
		},
		{
			MethodName: "GitRepoUpdate",
			Handler:    _GIT2_GitRepoUpdate_Handler,
		},
		{
			MethodName: "FindRepoByURL",
			Handler:    _GIT2_FindRepoByURL_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunLocalHook",
			Handler:       _GIT2_RunLocalHook_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Rebuild",
			Handler:       _GIT2_Rebuild_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/golang.conradwood.net/apis/gitserver/gitserver.proto",
}

// Client API for GITCredentials service

type GITCredentialsClient interface {
	// called by client if git calls it
	GitInvoked(ctx context.Context, in *GitCredentialsRequest, opts ...grpc.CallOption) (*GitCredentialsResponse, error)
}

type gITCredentialsClient struct {
	cc *grpc.ClientConn
}

func NewGITCredentialsClient(cc *grpc.ClientConn) GITCredentialsClient {
	return &gITCredentialsClient{cc}
}

func (c *gITCredentialsClient) GitInvoked(ctx context.Context, in *GitCredentialsRequest, opts ...grpc.CallOption) (*GitCredentialsResponse, error) {
	out := new(GitCredentialsResponse)
	err := grpc.Invoke(ctx, "/gitserver.GITCredentials/GitInvoked", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GITCredentials service

type GITCredentialsServer interface {
	// called by client if git calls it
	GitInvoked(context.Context, *GitCredentialsRequest) (*GitCredentialsResponse, error)
}

func RegisterGITCredentialsServer(s *grpc.Server, srv GITCredentialsServer) {
	s.RegisterService(&_GITCredentials_serviceDesc, srv)
}

func _GITCredentials_GitInvoked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GITCredentialsServer).GitInvoked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitserver.GITCredentials/GitInvoked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GITCredentialsServer).GitInvoked(ctx, req.(*GitCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GITCredentials_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitserver.GITCredentials",
	HandlerType: (*GITCredentialsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GitInvoked",
			Handler:    _GITCredentials_GitInvoked_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/golang.conradwood.net/apis/gitserver/gitserver.proto",
}

func init() {
	proto.RegisterFile("protos/golang.conradwood.net/apis/gitserver/gitserver.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 2116 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x58, 0xcd, 0x72, 0xdb, 0xc8,
	0xf1, 0x5f, 0x50, 0x94, 0x44, 0xb6, 0x48, 0x8a, 0x1a, 0x49, 0x16, 0x96, 0xbb, 0x7f, 0xfd, 0x15,
	0x64, 0xe3, 0x52, 0x39, 0x89, 0xec, 0xa5, 0xcb, 0xfb, 0x11, 0x6d, 0x6a, 0x8b, 0xe2, 0x97, 0xe9,
	0xd0, 0x22, 0x33, 0xa0, 0xec, 0xdc, 0x54, 0x58, 0x62, 0x4c, 0xa1, 0x44, 0x02, 0x0c, 0x30, 0x94,
	0x57, 0xb7, 0x54, 0xe5, 0x90, 0x43, 0x2e, 0xc9, 0x29, 0xa9, 0xca, 0x33, 0x6c, 0x1e, 0x21, 0x87,
	0xbc, 0x41, 0x9e, 0x21, 0x2f, 0x90, 0x47, 0x48, 0x4d, 0x0f, 0x40, 0x0c, 0x40, 0x8a, 0x52, 0x7c,
	0x91, 0xa6, 0x7f, 0x33, 0xdd, 0xd3, 0xdd, 0xd3, 0x5f, 0x04, 0x9c, 0x4e, 0x7d, 0x8f, 0x7b, 0xc1,
	0xd3, 0x91, 0x37, 0xb6, 0xdc, 0xd1, 0xc9, 0xd0, 0x73, 0x7d, 0xcb, 0x7e, 0xef, 0x79, 0xf6, 0x89,
	0xcb, 0xf8, 0x53, 0x6b, 0xea, 0x04, 0x4f, 0x47, 0x0e, 0x0f, 0x98, 0x7f, 0xc3, 0xfc, 0x78, 0x75,
	0x82, 0x5c, 0x24, 0x3f, 0x07, 0x2a, 0x27, 0x2b, 0x04, 0x0c, 0xbd, 0xc9, 0xc4, 0x73, 0xc3, 0x7f,
	0x92, 0xb5, 0xf2, 0x64, 0xc5, 0x79, 0x6b, 0xc6, 0xaf, 0xf0, 0x8f, 0x3c, 0x6b, 0xfc, 0x55, 0x83,
	0x52, 0xdb, 0xe1, 0x75, 0x9f, 0xd9, 0xcc, 0xe5, 0x8e, 0x35, 0x0e, 0x48, 0x09, 0x32, 0x9d, 0x86,
	0xae, 0x1d, 0x69, 0xc7, 0x59, 0x9a, 0xe9, 0x34, 0xc8, 0x23, 0xd8, 0xb8, 0x08, 0x98, 0xdf, 0x69,
	0xe8, 0x99, 0x23, 0xed, 0x38, 0x4f, 0x43, 0x8a, 0x10, 0xc8, 0xbe, 0xf4, 0x02, 0xae, 0xaf, 0x21,
	0x8a, 0x6b, 0x81, 0xf5, 0x2d, 0x7e, 0xa5, 0x67, 0x25, 0x26, 0xd6, 0xa4, 0x02, 0x39, 0xc1, 0xe1,
	0x5a, 0x13, 0xa6, 0xaf, 0x23, 0x3e, 0xa7, 0xc5, 0x5e, 0xdf, 0x0a, 0x82, 0xf7, 0x9e, 0x6f, 0xeb,
	0x1b, 0x72, 0x2f, 0xa2, 0x0d, 0x03, 0x4a, 0x94, 0x4d, 0xbd, 0x81, 0x35, 0xa2, 0xec, 0xb7, 0x33,
	0x16, 0x70, 0x52, 0x86, 0xb5, 0x81, 0x35, 0x42, 0xd5, 0x8a, 0x54, 0x2c, 0x8d, 0x1f, 0x32, 0x50,
	0xac, 0xfb, 0xcc, 0xe2, 0x4c, 0x1c, 0xed, 0x7a, 0xa3, 0x05, 0xed, 0x0d, 0x28, 0x88, 0xad, 0xc0,
	0xe1, 0x9e, 0x7f, 0x1b, 0xda, 0x90, 0xa5, 0x09, 0x4c, 0xb1, 0x70, 0x2d, 0x61, 0xa1, 0x0e, 0x9b,
	0x75, 0xcf, 0xe5, 0xec, 0x7b, 0x1e, 0x1a, 0x14, 0x91, 0x82, 0xa3, 0x36, 0xe4, 0x8e, 0xe7, 0xa2,
	0x45, 0x45, 0x1a, 0x52, 0x82, 0xc3, 0x9c, 0x0d, 0x87, 0x2c, 0x08, 0xd0, 0x9c, 0x1c, 0x8d, 0x48,
	0xa1, 0x47, 0xd3, 0xf7, 0x3d, 0xff, 0x35, 0x0b, 0x02, 0x6b, 0xc4, 0xf4, 0x4d, 0x14, 0x98, 0xc0,
	0x90, 0x9b, 0x5b, 0x3e, 0x67, 0xb6, 0x9e, 0x43, 0xb1, 0x11, 0x29, 0xfc, 0xd4, 0x72, 0x5c, 0x27,
	0xb8, 0x62, 0xb6, 0x9e, 0xc7, 0xad, 0x39, 0x4d, 0x9e, 0x40, 0xb9, 0x16, 0x04, 0xde, 0xd0, 0xb1,
	0x84, 0x0a, 0x03, 0xef, 0x9a, 0xb9, 0x3a, 0xa0, 0xf4, 0x05, 0xdc, 0xf8, 0xb7, 0x06, 0xeb, 0x67,
	0x33, 0x67, 0x6c, 0x7f, 0x90, 0x9f, 0x0e, 0x01, 0xea, 0xde, 0x64, 0xe2, 0xf0, 0x97, 0x56, 0x70,
	0x15, 0xfa, 0x4a, 0x41, 0x84, 0x57, 0xce, 0x7c, 0xcb, 0x1d, 0x46, 0xef, 0x1f, 0x52, 0x82, 0xaf,
	0xeb, 0x8d, 0x22, 0xcb, 0x65, 0x0c, 0x28, 0x88, 0xe2, 0xff, 0x8d, 0x84, 0xff, 0x3f, 0x85, 0xfc,
	0xc0, 0x99, 0xb0, 0x80, 0x5b, 0x93, 0x29, 0x3a, 0xac, 0x48, 0x63, 0x40, 0xf5, 0x75, 0x2e, 0xe1,
	0x6b, 0xe3, 0x05, 0xe4, 0xd1, 0xc8, 0xae, 0x13, 0x70, 0x72, 0x0c, 0x1b, 0x48, 0x04, 0xba, 0x76,
	0xb4, 0x76, 0xbc, 0x55, 0x2d, 0x9f, 0xc4, 0xa9, 0x86, 0x1b, 0x34, 0xdc, 0x37, 0x7e, 0x29, 0x03,
	0x4e, 0x9a, 0x8b, 0xbc, 0x3f, 0x85, 0x75, 0x44, 0x42, 0xd6, 0x7d, 0x85, 0x35, 0x3e, 0x49, 0xe5,
	0x19, 0xc3, 0x06, 0xe8, 0x33, 0x7f, 0xe2, 0x04, 0x81, 0x88, 0x04, 0x02, 0x59, 0xca, 0x2c, 0x1b,
	0x3d, 0x9c, 0xa3, 0xb8, 0x26, 0x7b, 0xb0, 0xfe, 0xd6, 0x77, 0x38, 0x43, 0xe7, 0xe6, 0xa8, 0x24,
	0x84, 0x1d, 0xcd, 0xef, 0xd9, 0x70, 0xc6, 0x19, 0xba, 0x34, 0x47, 0x23, 0x52, 0xc8, 0x10, 0x6a,
	0xa0, 0x37, 0x73, 0x14, 0xd7, 0xc6, 0x0d, 0xe4, 0xde, 0x5a, 0x7c, 0x78, 0xc5, 0xfc, 0x87, 0x67,
	0x6a, 0xfa, 0x6d, 0xd7, 0x96, 0xbf, 0xed, 0xb9, 0xc7, 0x9d, 0x77, 0xb7, 0xfc, 0x76, 0xca, 0xf0,
	0xc6, 0x22, 0x55, 0x10, 0xe3, 0x07, 0x0d, 0x20, 0x66, 0x58, 0xb8, 0xba, 0x02, 0x39, 0xb1, 0x7b,
	0x2e, 0x92, 0x5c, 0x5e, 0x3e, 0xa7, 0x85, 0x81, 0xbd, 0xf7, 0xae, 0x92, 0x5f, 0x11, 0x29, 0x14,
	0xab, 0xf9, 0x9c, 0xbd, 0xb3, 0x86, 0x1c, 0x39, 0x65, 0xd8, 0x24, 0x30, 0xf2, 0x42, 0x75, 0x2b,
	0x06, 0x4f, 0xf2, 0x21, 0xe2, 0x4d, 0xaa, 0x1c, 0x34, 0x7e, 0xaf, 0xc1, 0x7e, 0xdb, 0xf7, 0x66,
	0xd3, 0x58, 0xe9, 0x9a, 0xcc, 0xc4, 0x25, 0x5e, 0x13, 0x67, 0xe6, 0x31, 0x1f, 0x52, 0x42, 0x6d,
	0x14, 0x10, 0xab, 0x1d, 0x92, 0xf3, 0xb7, 0xcd, 0x2e, 0x7b, 0xdb, 0x75, 0xe5, 0x6d, 0x8d, 0xdf,
	0x69, 0xb0, 0x27, 0x1e, 0xe1, 0x83, 0x95, 0xb8, 0xab, 0x34, 0x3d, 0x5c, 0x85, 0x3f, 0x69, 0x40,
	0xfa, 0x5e, 0xc0, 0x29, 0x1b, 0x32, 0xe7, 0x86, 0x45, 0xb5, 0xf4, 0x33, 0x28, 0x8a, 0x2b, 0x1a,
	0x8e, 0xcf, 0x86, 0x42, 0x2f, 0xd4, 0x25, 0x4f, 0x93, 0xa0, 0xa8, 0xb8, 0x94, 0xbd, 0x0b, 0x5f,
	0x54, 0x2c, 0xc9, 0x11, 0x6c, 0xf5, 0xc6, 0x36, 0x65, 0x37, 0x0e, 0xbe, 0x87, 0xd4, 0x4a, 0x85,
	0xc4, 0x89, 0x73, 0xf6, 0x7e, 0x7e, 0x42, 0xbe, 0xa9, 0x0a, 0x19, 0xbb, 0xb0, 0xa3, 0x68, 0x64,
	0x72, 0x9f, 0x59, 0x13, 0xe3, 0xff, 0x60, 0xeb, 0xec, 0xb6, 0xd3, 0x88, 0xf4, 0x4b, 0x39, 0xc8,
	0x38, 0x82, 0xc2, 0xd9, 0xed, 0x05, 0xed, 0x2a, 0xbd, 0xe0, 0x82, 0x76, 0x43, 0xad, 0xc5, 0xd2,
	0x68, 0xab, 0xe9, 0xdb, 0x71, 0xdf, 0x79, 0x22, 0x74, 0x62, 0x04, 0x8f, 0xde, 0x99, 0xc3, 0xca,
	0x41, 0xe3, 0xcf, 0x1a, 0x6c, 0xb6, 0x1d, 0x8e, 0x22, 0xd2, 0xa9, 0xa3, 0xad, 0x6c, 0x1f, 0xc9,
	0xb4, 0x3b, 0x84, 0xac, 0x58, 0xa1, 0x8f, 0xb6, 0xaa, 0x70, 0x82, 0x6d, 0x17, 0xa3, 0x01, 0x71,
	0x11, 0x60, 0x6f, 0x98, 0x3f, 0x77, 0x52, 0x91, 0x46, 0x64, 0x64, 0xdc, 0x7a, 0x6c, 0xdc, 0x1f,
	0x35, 0xd8, 0x89, 0x1b, 0x5d, 0xe4, 0x84, 0x74, 0xfe, 0x68, 0x4b, 0xf2, 0xe7, 0x99, 0x94, 0x95,
	0x41, 0x25, 0x0e, 0x15, 0xeb, 0x4d, 0x6f, 0xe6, 0x0f, 0x59, 0x6c, 0x89, 0x70, 0xae, 0x38, 0x2a,
	0x1e, 0xb0, 0xc1, 0x82, 0xa1, 0xef, 0x4c, 0xb9, 0xf2, 0xc4, 0x0a, 0x64, 0xfc, 0x67, 0x1d, 0xca,
	0x69, 0xf6, 0x65, 0x25, 0xa1, 0xe5, 0x8c, 0x19, 0xce, 0x03, 0x61, 0x49, 0x88, 0x68, 0x52, 0x85,
	0xec, 0x05, 0xed, 0x06, 0xfa, 0x1a, 0xd6, 0xd5, 0xfb, 0xb4, 0xc2, 0xb3, 0x0f, 0x2a, 0x16, 0x8f,
	0xa1, 0x44, 0x67, 0xae, 0x12, 0x5c, 0x61, 0x2e, 0xa4, 0x50, 0x8c, 0xfe, 0x99, 0xdb, 0xf7, 0x59,
	0x74, 0x4c, 0x76, 0xeb, 0x24, 0x48, 0x8e, 0x61, 0x5b, 0xfa, 0xdc, 0xae, 0x7b, 0x93, 0xe9, 0x98,
	0x71, 0xd9, 0xb6, 0x73, 0x34, 0x0d, 0xa7, 0x5d, 0x96, 0x5b, 0x70, 0x99, 0x38, 0x21, 0x1e, 0x5d,
	0x76, 0xcb, 0x00, 0x9b, 0x78, 0x96, 0xaa, 0x90, 0x08, 0x87, 0x06, 0x13, 0xd2, 0x6c, 0x6c, 0xdf,
	0x39, 0x1a, 0x91, 0xa2, 0xc3, 0x87, 0xcb, 0xb8, 0x1d, 0x6e, 0x61, 0xc4, 0x2c, 0xe0, 0xa2, 0x8e,
	0x4b, 0x0c, 0x43, 0xaf, 0x20, 0x7b, 0x6d, 0x8c, 0x60, 0x2f, 0xb6, 0x02, 0x2e, 0x2f, 0xd5, 0x8b,
	0xb2, 0xce, 0xc7, 0x88, 0xf0, 0x60, 0x4c, 0xa1, 0x8c, 0x12, 0xca, 0x48, 0xa1, 0xa2, 0x00, 0x0d,
	0xac, 0x51, 0xa0, 0x6f, 0xa3, 0x04, 0x5c, 0x0b, 0x0b, 0x5a, 0x9e, 0x7f, 0xed, 0xb8, 0x23, 0xbd,
	0x2c, 0x2d, 0x08, 0x49, 0x71, 0xab, 0x58, 0x32, 0xbb, 0xe5, 0x7b, 0x13, 0x7d, 0x07, 0x8d, 0x57,
	0x10, 0xf2, 0x0c, 0x76, 0x65, 0x2f, 0xf6, 0x66, 0xdc, 0x71, 0x47, 0x03, 0x6b, 0x84, 0x4f, 0x4c,
	0xf0, 0xea, 0x65, 0x5b, 0xa4, 0x0a, 0x7b, 0x29, 0xf8, 0x8d, 0x35, 0x9e, 0x31, 0x7d, 0x17, 0x59,
	0x96, 0xee, 0xc9, 0x26, 0x65, 0xd9, 0x3d, 0x77, 0x7c, 0xab, 0xef, 0xa1, 0x82, 0x73, 0x1a, 0x67,
	0x1b, 0x7c, 0x54, 0xb4, 0x79, 0x3f, 0x9c, 0x6d, 0xe6, 0x88, 0x31, 0x83, 0xdd, 0x25, 0xa1, 0xb9,
	0x10, 0xf4, 0x8f, 0xa1, 0xf4, 0xa6, 0xba, 0x64, 0x90, 0x4a, 0xa1, 0x0f, 0x1d, 0x9e, 0x8d, 0x0e,
	0xec, 0xa5, 0xaf, 0xc5, 0xc9, 0xe4, 0xf3, 0xe4, 0x64, 0xf2, 0xc9, 0x8a, 0x0c, 0x8a, 0xe6, 0x93,
	0xbf, 0x68, 0xb0, 0x6b, 0x32, 0x2e, 0x88, 0xd6, 0xd8, 0x1a, 0x05, 0x51, 0x11, 0x89, 0x5b, 0x8f,
	0x96, 0x68, 0x3d, 0x8b, 0xb9, 0x94, 0x79, 0x58, 0x2e, 0xad, 0x2d, 0xcb, 0x25, 0xd5, 0xf7, 0xd9,
	0xa4, 0xef, 0x8d, 0x7f, 0x69, 0xb0, 0x25, 0x82, 0x41, 0x29, 0x6b, 0xf7, 0x16, 0xdd, 0x74, 0x35,
	0xc8, 0xdc, 0x5d, 0xfa, 0xd6, 0x3e, 0xb8, 0xf4, 0x65, 0x17, 0xf3, 0xf8, 0x31, 0x94, 0xa2, 0x3a,
	0x1c, 0x5a, 0x13, 0x56, 0x98, 0x24, 0x6a, 0xfc, 0x41, 0x83, 0x7c, 0xdf, 0x71, 0x47, 0x26, 0xb7,
	0x38, 0x5b, 0x08, 0x93, 0x65, 0x33, 0x7b, 0x66, 0xf9, 0xcc, 0x8e, 0xbf, 0x42, 0x64, 0xb9, 0x41,
	0x4b, 0x8a, 0x34, 0x22, 0x65, 0x0f, 0x0f, 0xa6, 0x9e, 0x1b, 0x30, 0x29, 0x22, 0x1b, 0xf5, 0x70,
	0x05, 0x34, 0x7e, 0x02, 0xdb, 0xf5, 0x2b, 0x36, 0xbc, 0x6e, 0x3b, 0x3c, 0x72, 0x70, 0x14, 0x7d,
	0x5a, 0x1c, 0x7d, 0xc6, 0xcf, 0xa0, 0x1c, 0x1f, 0x93, 0xfc, 0xea, 0x88, 0xad, 0x25, 0x47, 0xec,
	0x53, 0xd9, 0x5a, 0x5b, 0xce, 0x98, 0x33, 0x9f, 0xfc, 0x3c, 0x2c, 0x06, 0xb2, 0xc5, 0x7e, 0x9c,
	0x6a, 0xb1, 0xf1, 0x2f, 0x38, 0x59, 0x27, 0x8c, 0xbf, 0x69, 0x70, 0x70, 0x31, 0xb5, 0xc3, 0x66,
	0x26, 0x3c, 0x34, 0xbb, 0x37, 0x1a, 0x9f, 0x2b, 0xf1, 0x23, 0x3c, 0x55, 0xaa, 0x1e, 0x28, 0xd7,
	0xe0, 0x74, 0x21, 0x45, 0x31, 0x25, 0xa9, 0x05, 0xd3, 0xcc, 0x7d, 0xe9, 0x79, 0xd7, 0x01, 0xfa,
	0x6e, 0x25, 0x53, 0x78, 0xd0, 0xb8, 0x85, 0x2d, 0xb1, 0x88, 0x14, 0x3a, 0x14, 0x96, 0xe2, 0xf2,
	0x57, 0x2c, 0x9a, 0x92, 0x14, 0x44, 0x28, 0x2c, 0x67, 0x9b, 0xa8, 0xfb, 0x4b, 0x4a, 0xe0, 0x72,
	0x2a, 0x8a, 0x26, 0x37, 0x49, 0x89, 0x44, 0x10, 0xe2, 0x95, 0x16, 0x36, 0xa7, 0x8d, 0x57, 0x50,
	0x90, 0x57, 0x87, 0xfe, 0x4f, 0xff, 0x68, 0xd4, 0x96, 0xfc, 0x68, 0x14, 0xf7, 0xcc, 0xf8, 0x74,
	0xc6, 0xa3, 0xfb, 0x25, 0x65, 0xfc, 0x5d, 0x83, 0x1d, 0x61, 0x5e, 0xe4, 0x68, 0x69, 0xcd, 0x97,
	0x90, 0xeb, 0xf9, 0xce, 0xc8, 0x71, 0xad, 0x71, 0xf8, 0x5a, 0x2b, 0x4b, 0xc7, 0xfc, 0x70, 0x3a,
	0x33, 0x32, 0x8b, 0x99, 0x71, 0x08, 0x50, 0xb3, 0xed, 0x0b, 0xda, 0x55, 0x0a, 0x9b, 0x82, 0xc4,
	0xfb, 0x4a, 0x91, 0x53, 0x10, 0x63, 0x02, 0xfa, 0xc2, 0xfd, 0x91, 0x23, 0xf6, 0x60, 0xbd, 0xe5,
	0xcd, 0xdc, 0xe8, 0xe7, 0x94, 0x24, 0xc8, 0x69, 0x62, 0xbe, 0xcb, 0xdc, 0x6f, 0x8e, 0x3a, 0xe5,
	0x0d, 0x61, 0x3f, 0xf9, 0xe1, 0x43, 0x49, 0x8e, 0x9a, 0x3f, 0x92, 0x95, 0x35, 0x4f, 0x71, 0x2d,
	0xac, 0x6f, 0xba, 0x37, 0x8e, 0xef, 0xb9, 0x13, 0xe6, 0x0a, 0x4f, 0x8b, 0x2d, 0x15, 0x12, 0x1a,
	0x9a, 0xdc, 0x76, 0xa2, 0x71, 0x49, 0x12, 0xc6, 0x33, 0x78, 0x94, 0xbe, 0x24, 0xb4, 0xe8, 0x11,
	0x6c, 0x98, 0xdc, 0xf6, 0x66, 0x51, 0x12, 0x86, 0xd4, 0x93, 0x7f, 0x6a, 0xb0, 0x49, 0x9b, 0xfd,
	0xde, 0xa0, 0xd6, 0x26, 0x45, 0xc8, 0x5f, 0x9c, 0x37, 0x9a, 0xad, 0xce, 0x79, 0xb3, 0x51, 0xfe,
	0x88, 0x7c, 0x0c, 0xfb, 0x66, 0xfd, 0xb2, 0xd5, 0xa1, 0xaf, 0xdf, 0xd6, 0x68, 0xf3, 0xd2, 0x1c,
	0xbc, 0x7e, 0x5e, 0xed, 0x7e, 0xfe, 0xe2, 0x37, 0x65, 0x8d, 0x1c, 0xc0, 0xae, 0x59, 0xbf, 0xec,
	0xf6, 0x6a, 0x8d, 0x26, 0x55, 0x36, 0x32, 0x64, 0x1f, 0x76, 0xcc, 0xfa, 0x65, 0xad, 0xdf, 0x97,
	0xe8, 0x25, 0xc2, 0x6b, 0xa4, 0x02, 0x8f, 0x9a, 0x66, 0xff, 0xab, 0xea, 0x17, 0x5f, 0x5c, 0xd6,
	0xcc, 0xcb, 0x7a, 0xaf, 0x4f, 0x7b, 0xf5, 0xa6, 0x69, 0xf6, 0x68, 0x39, 0x4b, 0x74, 0xd8, 0x6b,
	0x9a, 0xfd, 0xe7, 0xd5, 0xf4, 0xce, 0x7a, 0x28, 0x6c, 0xae, 0x00, 0x9e, 0x2a, 0x6f, 0x90, 0x32,
	0x14, 0xc2, 0x3b, 0x24, 0xb2, 0xf9, 0xe4, 0x6b, 0x28, 0xa8, 0xc9, 0x45, 0x0a, 0x90, 0x3b, 0xef,
	0xd5, 0x5f, 0xd6, 0xce, 0xdb, 0xcd, 0xf2, 0x47, 0x82, 0x32, 0x9b, 0x83, 0xcb, 0x01, 0xbd, 0x68,
	0x96, 0x35, 0x61, 0xa4, 0xa0, 0x5a, 0xb5, 0xae, 0xd9, 0x2c, 0x67, 0xaa, 0xff, 0xc8, 0x43, 0xb6,
	0xdd, 0x19, 0x54, 0x49, 0x07, 0x4a, 0x51, 0x3d, 0x32, 0xf1, 0x39, 0x49, 0x45, 0x79, 0xda, 0x54,
	0x45, 0xab, 0x7c, 0xb2, 0x74, 0x2f, 0xf4, 0xf5, 0xb7, 0xf2, 0xc7, 0xe9, 0x19, 0x0e, 0xeb, 0xea,
	0xcf, 0xff, 0xf8, 0xf7, 0x46, 0x65, 0x55, 0xdc, 0x90, 0x1a, 0xe4, 0xa5, 0x00, 0xd1, 0x23, 0x0e,
	0x12, 0x12, 0xe2, 0x9f, 0x24, 0xab, 0x45, 0x9c, 0x42, 0x56, 0xb4, 0xb8, 0xc4, 0xfd, 0x4a, 0xcf,
	0x5b, 0xcd, 0xfc, 0x35, 0xe4, 0xda, 0xb2, 0x73, 0x07, 0xa4, 0x70, 0x12, 0x7e, 0xec, 0x7b, 0xe3,
	0x39, 0x76, 0xe5, 0xff, 0x57, 0xb0, 0xe1, 0xa0, 0xd0, 0x8e, 0xe6, 0x1a, 0x81, 0x93, 0x4f, 0x55,
	0x37, 0xa5, 0x7f, 0x4e, 0xac, 0xd6, 0xe1, 0x1b, 0x28, 0xa8, 0xd3, 0x03, 0x49, 0xf4, 0xd3, 0xc5,
	0xb1, 0xa2, 0x92, 0xd0, 0x93, 0x9c, 0xc2, 0x2e, 0x7a, 0x50, 0x8c, 0x65, 0x38, 0xf2, 0xca, 0xb9,
	0xf9, 0xae, 0xd7, 0x48, 0x32, 0x7f, 0x09, 0xdb, 0x94, 0x05, 0xa1, 0x03, 0xa4, 0x36, 0x0f, 0x63,
	0xfc, 0x2a, 0x1a, 0x9c, 0xff, 0x67, 0xce, 0x57, 0x50, 0x88, 0x3c, 0x8e, 0xa3, 0xed, 0xdd, 0x3d,
	0xed, 0xfe, 0x27, 0xf8, 0x16, 0xb6, 0x51, 0xd6, 0x90, 0xb9, 0x5c, 0x7e, 0x6a, 0xba, 0x53, 0x89,
	0xbd, 0xf4, 0xc7, 0x29, 0x14, 0xf0, 0x0b, 0x28, 0xb5, 0x19, 0xef, 0x5a, 0x9c, 0x05, 0x52, 0xc0,
	0x9d, 0xfc, 0x0b, 0x1f, 0xb7, 0x88, 0x09, 0xe5, 0x74, 0xab, 0x25, 0x86, 0x72, 0xea, 0x8e, 0x3e,
	0x7c, 0x5f, 0x3e, 0x14, 0xe8, 0xcc, 0xed, 0x7a, 0x43, 0x6b, 0x2c, 0xfa, 0x55, 0x42, 0x1d, 0xa5,
	0x77, 0x56, 0x0e, 0x16, 0x70, 0x99, 0x91, 0xcf, 0x34, 0xf2, 0x0a, 0x8a, 0x98, 0xa2, 0x51, 0x83,
	0x4a, 0x84, 0xe6, 0x42, 0xdf, 0x5a, 0xad, 0xce, 0x6b, 0x28, 0xb6, 0x1c, 0xd7, 0x7e, 0x40, 0x8a,
	0xfe, 0x78, 0x55, 0x77, 0x88, 0xca, 0xc5, 0x37, 0xb0, 0x49, 0xd9, 0x77, 0x2b, 0xfd, 0x7c, 0xb7,
	0x61, 0xd5, 0x21, 0x94, 0xda, 0x9d, 0x81, 0xfa, 0x41, 0xfd, 0xd7, 0x00, 0xf8, 0x39, 0xe1, 0xc6,
	0xbb, 0x66, 0x36, 0x39, 0x52, 0x58, 0x97, 0x36, 0xa0, 0xca, 0x8f, 0x56, 0x9c, 0x90, 0xd7, 0x9c,
	0x3d, 0x86, 0xcf, 0x5c, 0xc6, 0xd5, 0x2f, 0xfc, 0xe1, 0x37, 0x7f, 0x6b, 0xea, 0x04, 0x31, 0xfb,
	0x77, 0x1b, 0xf8, 0x95, 0xff, 0xf9, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x07, 0x6d, 0x4c,
	0x8b, 0x18, 0x00, 0x00,
}
